{"__ud_title":"使用自定义的 VitePress 构建自己的博客","__ud_tags":["Vitepress"],"__ud_update_time":1731919010789,"__ud_create_time":1731893872976,"__ud_draft":false,"type":"doc","content":[{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"使用自定义的 VitePress 构建自己的博客"}]},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"什么是 VitePress"}]},{"type":"paragraph","content":[{"type":"text","text":"VitePress 的原理是利用 Vue 的 SSR 特性，服务端先把包含 Markdown 文本内容的 Vue 组件渲染成多个静态 HTML 文件，再配合内置的简易路由系统生成一个博客站点，这其实与 VuePress 的原理如出一辙，不过 VitePress 舍弃了许多臃肿的功能，只保留最简单的渲染系统，并且重新实现了一个简易的 router，保持了轻量性，同时也因为使用 Vite 提高了开发时的速度，对于拥有大量文档的项目十分友好。"}]},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"开始使用"}]},{"type":"paragraph","content":[{"type":"text","text":"按照 VitePress 官方网站的"},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://vitepress.vuejs.org/guide/getting-started.html","target":"_blank","rel":"noopener noreferrer nofollow","class":null}}],"text":"教程"},{"type":"text","text":"，一个标准的 VitePress 项目文件结构如下："}]},{"type":"codeBlock","attrs":{"language":"sh"},"content":[{"type":"text","text":"├─ docs\n│  ├─ .vitepress\n│  │  └─ config.js\n│  └─ index.md\n└─ package.json\n"}]},{"type":"paragraph","content":[{"type":"text","text":"从这里就可以看出，"},{"type":"text","marks":[{"type":"code"}],"text":".vitepress"},{"type":"text","text":"这个文件夹包含了 VitePress 所需的配置结构，并且可以指定特定文件夹为主目录。出于个人习惯，我比较喜欢把文档与配置分开，变成如下目录结构"}]},{"type":"codeBlock","attrs":{"language":"sh"},"content":[{"type":"text","text":"├─ docs\n│    └─ other-documents.md\n├─ .vitepress\n│    └─ config.js\n├─ index.md\n└─ package.json\n"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"code"}],"text":"index.md"},{"type":"text","text":" 作为博客的入口文件，一般我们不会使用它的具体内容，简单设置 frontmatter 即可。 VitePress 会自动使用文档的路径作为访问的 URL，例如上面的"},{"type":"text","marks":[{"type":"code"}],"text":"other-documents.md"},{"type":"text","text":"对应的页面就是"},{"type":"text","marks":[{"type":"code"}],"text":"localhost:3000/#/docs/other-documents.html"}]},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"主题"}]},{"type":"paragraph","content":[{"type":"text","text":"VitePress 的默认主题作为普通文档项目已经很不错了，不过作为博客还是有点不够个性化，因此也提供了主题功能。新建文件夹"},{"type":"text","marks":[{"type":"code"}],"text":".VitePress/theme"},{"type":"text","text":"，结构如下"}]},{"type":"codeBlock","attrs":{"language":"sh"},"content":[{"type":"text","text":"├─ docs\n│    └─ other-documents.md\n├─ .vitepress\n│    └─ config.js\n│    └─ theme\n│        └─ index.js\n│        └─ Layout.vue\n│        └─ NotFound.vue\n├─ index.md\n└─ package.json\n"}]},{"type":"paragraph","content":[{"type":"text","text":"一般来说，VitePress 的主题文件需要至少导出"},{"type":"text","marks":[{"type":"code"}],"text":"Layout"},{"type":"text","text":"和"},{"type":"text","marks":[{"type":"code"}],"text":"NotFound"},{"type":"text","text":"两个组件，前者即渲染 HTML 所用的模版组件，后者则为 404 页面。 一个简单的 Layout 页面如下"}]},{"type":"codeBlock","attrs":{"language":"vue"},"content":[{"type":"text","text":"<script setup lang=\"ts\">\nimport { useData } from \"vitepress\";\nconst { site, page } = useData<CustomThemeConfig>();\n</script>\n<template>\n  <div>Hello VitePress</div>\n  <Content />\n</template>\n<style lang=\"scss\"></style>\n"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"code"}],"text":"<Content />"},{"type":"text","text":"是 VitePress 的内置组件，用于渲染默认的 markdown 文件；"},{"type":"text","marks":[{"type":"code"}],"text":"useData"},{"type":"text","text":"是 VitePress 提供的内置 hoook，其中包含了每个页面的标题、描述、内容等数据，我们就可以通过这些数据来渲染个性化的博客页面，就像写一个普通的 Vue 组件一样。"}]},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"SSR 相关问题"}]},{"type":"paragraph","content":[{"type":"text","text":"因为 VitePress 使用的是服务端渲染，所以一些客户端的组件在渲染时可能会报错"},{"type":"text","marks":[{"type":"code"}],"text":"Hydration is completed but contains mismatches"},{"type":"text","text":"，例如使用了自定义指令或者使用了"},{"type":"text","marks":[{"type":"code"}],"text":"onMounted"},{"type":"text","text":"等服务端不支持的生命周期函数，对于这些特殊组件，我们可以使用 VitePress 内置的组件"},{"type":"text","marks":[{"type":"code"}],"text":"<ClientOnly></ClientOnly>"},{"type":"text","text":"来包裹特定组件，告诉 VitePress 只在客户端渲染这些组件。如果仍然报错，可以优化自定义指令的实现逻辑，增加对客户端环境的判断然后再条件执行."}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"const isClient = typeof window !== \"undefined\";\nif (isClient) {\n  // do something\n}\n"}]},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"额外的配置数据"}]},{"type":"paragraph","content":[{"type":"text","text":"对于需要展示文章列表的博客，VitePress 并没有提供一个方便的 API 来获取所有文章的数据，因此我们需要手动读取文章数据，得益于 Node 强大的生态，这件事情做起来很简单。"}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"// utils.ts\nimport { readFile } from \"fs\";\n// gray-matter 用于读取markdown文件的frontmatter\nimport matter from \"gray-matter\";\n\nexport default async function getArticles() {\n  // 读取文件夹中的markdown文件并解析\n  // await reading...\n  return [];\n}\n"}]},{"type":"paragraph","content":[{"type":"hardBreak"}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"// config.ts\nimport { defineConfigWithTheme } from \"vitepress\";\n// getArticles 函数中实现读取文章列表的功能\nimport getArticles from \"./utils\";\n\n// config.ts 可以导出异步函数\nexport default async () =>\ndefineConfigWithTheme<CustomThemeConfig}>({\n  themeConfig: {\n    articles: await getArticles(),\n  },\n});\n\n"}]},{"type":"paragraph","content":[{"type":"hardBreak"}]},{"type":"codeBlock","attrs":{"language":"vue"},"content":[{"type":"text","text":"<script setup lang=\"ts\">\nimport { useData } from \"vitepress\";\nconst data = useData<CustomThemeConfig>();\n// 使用useData获得themeConfig中传入的articles数据\nconst articles = computed(() => site.value.themeConfig.articles);\n</script>\n<template>\n  <div class=\"list\">\n    <div v-for=\"(article, index) in articles\" class=\"item\">\n      {{ article.title }}\n    </div>\n  </div>\n</template>\n<style></style>\n"}]},{"type":"paragraph","content":[{"type":"text","text":"同样的方法可以获取到配置文件传递的其他数据。要注意只能从 VitePress 提供的数据中获取数据，因为在渲染完成后无法访问到 Node 环境。"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Tips"}]},{"type":"orderedList","attrs":{"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"一些情况下，使用"},{"type":"text","marks":[{"type":"code"}],"text":"v-if"},{"type":"text","text":"指令也会导致 SSR Hydration 出现报错，但不会影响 HTML 到正常渲染，可以使用"},{"type":"text","marks":[{"type":"code"}],"text":"v-show"},{"type":"text","text":"代替。"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Markdown 文件开头可以设置 fromtmatter，可以包含文章标题、简述、题图等信息，方便自定义渲染，例如"}]}]}]},{"type":"codeBlock","attrs":{"language":"markdown"},"content":[{"type":"text","text":"---\ndate: 2021-01-06\ntitle: 首页\ndescribe: 首页\nhome: true\n---\n"}]},{"type":"orderedList","attrs":{"start":3},"content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"可以直接引入 VitePress 内置的样式和主题文件，然后在原始主题基础上进行修改，例如"}]}]}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"// theme/index.ts\nimport defaultTheme from \"vitepress/theme\";\nimport NotFound from \"./NotFound.vue\";\nimport Layout from \"./Layout.vue\";\n\nexport default {\n  ...defaultTheme,\n  NotFound,\n  Layout,\n};\n"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"最后"}]},{"type":"paragraph","content":[{"type":"text","text":"VitePress 还支持许多特性，例如自定义 vite 配置、自定义 markdown 渲染器、markdown 文件内引入 vue 组件(例如： )等等，这些都可以在 VitePress 的"},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://vitepress.vuejs.org/","target":"_blank","rel":"noopener noreferrer nofollow","class":null}}],"text":"官方文档"},{"type":"text","text":"内看到，默默等待 VitePress 正式版发布吧。"}]}]}