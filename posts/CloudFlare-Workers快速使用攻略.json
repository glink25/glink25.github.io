{"__ud_title":"CloudFlare Workers快速使用攻略","__ud_tags":["CloudFlare Workers"],"__ud_update_time":1733216455480,"__ud_create_time":1733212620444,"__ud_draft":false,"type":"doc","content":[{"type":"heading","attrs":{"level":1,"id":"CloudFlare-Workers快速使用攻略"},"content":[{"type":"text","text":"CloudFlare Workers快速使用攻略"}]},{"type":"paragraph","content":[{"type":"text","text":"CloudFlare Workers是众多Serverless服务中的一种，同样的还有Netlify，Vercel等大厂提供的各式后端服务，这些后端服务的特点是弹性扩容，无数据库，但是最重要的是"},{"type":"text","marks":[{"type":"bold"}],"text":"免费"},{"type":"text","text":"！"}]},{"type":"paragraph","content":[{"type":"text","text":"这些Serverless服务都能运行Node.js代码，并作为独立的接口运行，好消息是免费的额度基本够用，坏消息是因为并非完整的服务器环境，因此无法部署其他的服务，例如数据库等，由于Stateless特性，也无法用于保存数据，实现聊天系统等依赖上下文的功能，但是作为分发服务却十分好用，尤其是例如前端SSR项目，纯粹的API转发等，能够快速部署上线。"}]},{"type":"paragraph","content":[{"type":"text","text":"以CloudFlare Workers为例，它提供了许多免费Workers实例额度供个人开发者使用，并且相比起其他家的服务，它的API可访问性更高，在内地也能正常访问，因此更适合面向国内用户使用。"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"起步"}]},{"type":"paragraph","content":[{"type":"text","text":"要使用CloudFlare Workers首先需要注册一个CloudFlare账号，注册是完全免费的。"}]},{"type":"paragraph","content":[{"type":"text","text":"在CloudFlare管理后台，可以找到Workers & Pages栏目，在这里可以管理自己的所有Workers。"}]},{"type":"paragraph","content":[{"type":"text","text":"如果只是简单的Node.js项目，直接通过CloudFlare的管理后台上传服务代码即可。"}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"type":"text","text":"addEventListener(\"fetch\", (event) => {\n  event.respondWith(new Response(\"hello cloudflare worker\"));\n});"}]},{"type":"paragraph","content":[{"type":"text","text":"可以看到Worker的核心代码是"},{"type":"text","marks":[{"type":"code"}],"text":"addEventListener(\"fetch\")"},{"type":"text","text":" ，用于处理服务器收到的请求，这也是大多数Serverless服务都提供的功能，基于此我们就可以实现一个简单的Node.js服务器。"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"工程化"}]},{"type":"paragraph","content":[{"type":"text","text":"如果想要稍微正式点的对项目进行迭代，本地开发和Git管理必不可少，CloudFlare也提供了对应的工具协助进行本地开发，即"},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://www.npmjs.com/package/wrangler","target":"_blank","rel":"noreferer","class":null}}],"text":"Wrangler"},{"type":"text","text":"，这是一个命令行工具，可以模拟Workers的线上运行环境，在本地进行开发。"}]},{"type":"codeBlock","attrs":{"language":"bash"},"content":[{"type":"text","text":"# 新建项目\nnpx wrangler init my-worker"}]},{"type":"paragraph","content":[{"type":"text","text":"通过Wrangler新建项目后，会自动生成wrangler.toml配置文件，里面指定了当前Worker的名称、入口文件等。"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"第一次使用wrangler命令需要登录"}]}]},{"type":"paragraph","content":[{"type":"text","text":"Cloudflare Worker支持Typescript文件，因此你可以直接编写index.ts进行开发。"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"使用Hono"}]},{"type":"paragraph","content":[{"type":"text","text":"手动写路由处理函数会比较复杂，推荐使用"},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://www.npmjs.com/package/hono","target":"_blank","rel":"noreferer","class":null}}],"text":"Hono"},{"type":"text","text":"进行开发，它提供了类似于Koa.js的API抽象，并且提供了多家Serverless服务提供商的支持，抹平了一些不同环境的API差异。"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"环境变量"}]},{"type":"paragraph","content":[{"type":"text","text":"有时我们需要将密钥等敏感数据保存到环境变量中防止泄漏，可以使用wrangler自带的命令将变量传输到CloudFlare控制台中："}]},{"type":"codeBlock","attrs":{"language":"bash"},"content":[{"type":"text","text":"wrangler secret put CLIENT_ID\nwrangler secret put CLIENT_SECRET"}]},{"type":"paragraph","content":[{"type":"text","text":"如果想在本地开发时使用测试用的环境变量，需要使用"},{"type":"text","marks":[{"type":"code"}],"text":".dev.vars"},{"type":"text","text":"文件"}]},{"type":"codeBlock","attrs":{"language":"plaintext"},"content":[{"type":"text","text":"CLIENT_ID=xxx\nCLIENT_SECRET=xxxxxxx"}]},{"type":"paragraph","content":[{"type":"text","text":"可以在代码中这样调用环境变量："}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"// 直接使用\nconst client_id = CLIENT_ID;\nconst client_secret = CLIENT_SECRET;\n\n// 使用Hono\napp.get('/', (ctx) => {\n\tconst { CLIENT_ID, CLIENT_SECRET } = ctx.env;\n});"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"部署"}]},{"type":"paragraph","content":[{"type":"text","text":"开发完成后也可以使用wrangler一键部署"}]},{"type":"codeBlock","attrs":{"language":"json"},"content":[{"type":"text","text":"wrangler deploy"}]},{"type":"heading","attrs":{"level":2,"id":"结合Github"},"content":[{"type":"text","text":"结合Github使用"}]},{"type":"paragraph","content":[{"type":"text","text":"有时会希望使用Github Actions来自动部署Workers，这当然也没问题。"}]},{"type":"paragraph","content":[{"type":"text","text":"要使用Github Actions部署项目，首先需要创建Actions配置文件"}]},{"type":"codeBlock","attrs":{"language":"yaml"},"content":[{"type":"text","text":"# .github/actions/deploy.yaml\nname: Deploy Worker\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    timeout-minutes: 60\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build & Deploy Worker\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"}]},{"type":"paragraph","content":[{"type":"text","text":"然后需要在Github中配置对应的Action Secrets："},{"type":"text","marks":[{"type":"code"}],"text":"CLOUDFLARE_API_TOKEN"},{"type":"text","text":"和"},{"type":"text","marks":[{"type":"code"}],"text":"CLOUDFLARE_ACCOUNT_ID"},{"type":"text","text":" "}]},{"type":"paragraph","content":[{"type":"text","text":"其中"},{"type":"text","marks":[{"type":"code"}],"text":"CLOUDFLARE_API_TOKEN"},{"type":"text","text":" 需要在Cloudflare控制台生成："},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://dash.cloudflare.com/profile/api-tokens","target":"_blank","rel":"noreferer","class":null}}],"text":"新建API tokens"}]},{"type":"paragraph","content":[{"type":"text","text":"在生成token时，选择对应的模版即可（Workers & Pages)，生成的token同样只能查看一次。"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"code"}],"text":"CLOUDFLARE_ACCOUNT_ID"},{"type":"text","text":" 则是你的Cloudflare账号ID，一般来说进入控制台首页后，网页链接末尾的一串数字就是账号ID，也可以在Workers & Pages首页的侧边栏找到"}]},{"type":"heading","attrs":{"level":2,"id":null},"content":[{"type":"text","text":"其他"}]},{"type":"paragraph","content":[{"type":"text","text":"部署完成后，通过控制台可以看到当前服务的运行情况，可以查看日志等，也可以重新调整Worker的访问链接。"}]},{"type":"paragraph"}]}