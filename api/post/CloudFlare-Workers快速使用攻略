{"content":"{\"__ud_title\":\"CloudFlare Workers快速使用攻略\",\"__ud_tags\":[\"CloudFlare Workers\"],\"__ud_update_time\":1733216455480,\"__ud_create_time\":1733212620444,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":\"CloudFlare-Workers快速使用攻略\"},\"content\":[{\"type\":\"text\",\"text\":\"CloudFlare Workers快速使用攻略\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"CloudFlare Workers是众多Serverless服务中的一种，同样的还有Netlify，Vercel等大厂提供的各式后端服务，这些后端服务的特点是弹性扩容，无数据库，但是最重要的是\"},{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"免费\"},{\"type\":\"text\",\"text\":\"！\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"这些Serverless服务都能运行Node.js代码，并作为独立的接口运行，好消息是免费的额度基本够用，坏消息是因为并非完整的服务器环境，因此无法部署其他的服务，例如数据库等，由于Stateless特性，也无法用于保存数据，实现聊天系统等依赖上下文的功能，但是作为分发服务却十分好用，尤其是例如前端SSR项目，纯粹的API转发等，能够快速部署上线。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"以CloudFlare Workers为例，它提供了许多免费Workers实例额度供个人开发者使用，并且相比起其他家的服务，它的API可访问性更高，在内地也能正常访问，因此更适合面向国内用户使用。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"起步\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"要使用CloudFlare Workers首先需要注册一个CloudFlare账号，注册是完全免费的。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在CloudFlare管理后台，可以找到Workers & Pages栏目，在这里可以管理自己的所有Workers。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"如果只是简单的Node.js项目，直接通过CloudFlare的管理后台上传服务代码即可。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"addEventListener(\\\"fetch\\\", (event) => {\\n  event.respondWith(new Response(\\\"hello cloudflare worker\\\"));\\n});\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"可以看到Worker的核心代码是\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"addEventListener(\\\"fetch\\\")\"},{\"type\":\"text\",\"text\":\" ，用于处理服务器收到的请求，这也是大多数Serverless服务都提供的功能，基于此我们就可以实现一个简单的Node.js服务器。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"工程化\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"如果想要稍微正式点的对项目进行迭代，本地开发和Git管理必不可少，CloudFlare也提供了对应的工具协助进行本地开发，即\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://www.npmjs.com/package/wrangler\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"Wrangler\"},{\"type\":\"text\",\"text\":\"，这是一个命令行工具，可以模拟Workers的线上运行环境，在本地进行开发。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"bash\"},\"content\":[{\"type\":\"text\",\"text\":\"# 新建项目\\nnpx wrangler init my-worker\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"通过Wrangler新建项目后，会自动生成wrangler.toml配置文件，里面指定了当前Worker的名称、入口文件等。\"}]},{\"type\":\"blockquote\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"第一次使用wrangler命令需要登录\"}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Cloudflare Worker支持Typescript文件，因此你可以直接编写index.ts进行开发。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"使用Hono\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"手动写路由处理函数会比较复杂，推荐使用\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://www.npmjs.com/package/hono\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"Hono\"},{\"type\":\"text\",\"text\":\"进行开发，它提供了类似于Koa.js的API抽象，并且提供了多家Serverless服务提供商的支持，抹平了一些不同环境的API差异。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"环境变量\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"有时我们需要将密钥等敏感数据保存到环境变量中防止泄漏，可以使用wrangler自带的命令将变量传输到CloudFlare控制台中：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"bash\"},\"content\":[{\"type\":\"text\",\"text\":\"wrangler secret put CLIENT_ID\\nwrangler secret put CLIENT_SECRET\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"如果想在本地开发时使用测试用的环境变量，需要使用\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\".dev.vars\"},{\"type\":\"text\",\"text\":\"文件\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"plaintext\"},\"content\":[{\"type\":\"text\",\"text\":\"CLIENT_ID=xxx\\nCLIENT_SECRET=xxxxxxx\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"可以在代码中这样调用环境变量：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"typescript\"},\"content\":[{\"type\":\"text\",\"text\":\"// 直接使用\\nconst client_id = CLIENT_ID;\\nconst client_secret = CLIENT_SECRET;\\n\\n// 使用Hono\\napp.get('/', (ctx) => {\\n\\tconst { CLIENT_ID, CLIENT_SECRET } = ctx.env;\\n});\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"部署\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"开发完成后也可以使用wrangler一键部署\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"json\"},\"content\":[{\"type\":\"text\",\"text\":\"wrangler deploy\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"结合Github\"},\"content\":[{\"type\":\"text\",\"text\":\"结合Github使用\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"有时会希望使用Github Actions来自动部署Workers，这当然也没问题。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"要使用Github Actions部署项目，首先需要创建Actions配置文件\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"yaml\"},\"content\":[{\"type\":\"text\",\"text\":\"# .github/actions/deploy.yaml\\nname: Deploy Worker\\non:\\n  push:\\n    branches:\\n      - main\\njobs:\\n  deploy:\\n    runs-on: ubuntu-latest\\n    timeout-minutes: 60\\n    steps:\\n      - uses: actions/checkout@v4\\n      - name: Build & Deploy Worker\\n        uses: cloudflare/wrangler-action@v3\\n        with:\\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"然后需要在Github中配置对应的Action Secrets：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"CLOUDFLARE_API_TOKEN\"},{\"type\":\"text\",\"text\":\"和\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"CLOUDFLARE_ACCOUNT_ID\"},{\"type\":\"text\",\"text\":\" \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"其中\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"CLOUDFLARE_API_TOKEN\"},{\"type\":\"text\",\"text\":\" 需要在Cloudflare控制台生成：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://dash.cloudflare.com/profile/api-tokens\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"新建API tokens\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在生成token时，选择对应的模版即可（Workers & Pages)，生成的token同样只能查看一次。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"CLOUDFLARE_ACCOUNT_ID\"},{\"type\":\"text\",\"text\":\" 则是你的Cloudflare账号ID，一般来说进入控制台首页后，网页链接末尾的一串数字就是账号ID，也可以在Workers & Pages首页的侧边栏找到\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"其他\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"部署完成后，通过控制台可以看到当前服务的运行情况，可以查看日志等，也可以重新调整Worker的访问链接。\"}]},{\"type\":\"paragraph\"}]}","title":"CloudFlare Workers快速使用攻略","tags":["CloudFlare Workers"],"updateTime":1733216455480,"createTime":1733212620444,"draft":false,"intro":"CloudFlare Workers是众多Serverless服务中的一种，同样的还有Netlify，Vercel等大厂提供的各式后端服务，这些后端服务的特点是弹性扩容，无数据库，但是最重要的是免费！","html":"<h1 level=\"1\" id=\"CloudFlare-Workers快速使用攻略\">CloudFlare Workers快速使用攻略</h1><p>CloudFlare Workers是众多Serverless服务中的一种，同样的还有Netlify，Vercel等大厂提供的各式后端服务，这些后端服务的特点是弹性扩容，无数据库，但是最重要的是<strong>免费</strong>！</p><p>这些Serverless服务都能运行Node.js代码，并作为独立的接口运行，好消息是免费的额度基本够用，坏消息是因为并非完整的服务器环境，因此无法部署其他的服务，例如数据库等，由于Stateless特性，也无法用于保存数据，实现聊天系统等依赖上下文的功能，但是作为分发服务却十分好用，尤其是例如前端SSR项目，纯粹的API转发等，能够快速部署上线。</p><p>以CloudFlare Workers为例，它提供了许多免费Workers实例额度供个人开发者使用，并且相比起其他家的服务，它的API可访问性更高，在内地也能正常访问，因此更适合面向国内用户使用。</p><h2 level=\"2\" id=\"起步\">起步</h2><p>要使用CloudFlare Workers首先需要注册一个CloudFlare账号，注册是完全免费的。</p><p>在CloudFlare管理后台，可以找到Workers &amp; Pages栏目，在这里可以管理自己的所有Workers。</p><p>如果只是简单的Node.js项目，直接通过CloudFlare的管理后台上传服务代码即可。</p><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-title,function_\" class=\"hljs-title,function_\">addEventListener</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;fetch&quot;</span>, <span class=\"hljs-function\" class=\"hljs-function\">(<span class=\"hljs-params\" class=\"hljs-params\">event</span>) =&gt;</span> {\n  event.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">respondWith</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Response</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;hello cloudflare worker&quot;</span>));\n});</code></pre></div></div><p>可以看到Worker的核心代码是<code>addEventListener(&quot;fetch&quot;)</code> ，用于处理服务器收到的请求，这也是大多数Serverless服务都提供的功能，基于此我们就可以实现一个简单的Node.js服务器。</p><h2 level=\"2\" id=\"工程化\">工程化</h2><p>如果想要稍微正式点的对项目进行迭代，本地开发和Git管理必不可少，CloudFlare也提供了对应的工具协助进行本地开发，即<a target=\"_blank\" rel=\"noreferer\" href=\"https://www.npmjs.com/package/wrangler\">Wrangler</a>，这是一个命令行工具，可以模拟Workers的线上运行环境，在本地进行开发。</p><div class=\"llt-code readonly\"><div class=\"language\">bash</div><div class=\"wrapper\"><pre><code class=\"language-bash\"><span class=\"hljs-comment\" class=\"hljs-comment\"># 新建项目</span>\nnpx wrangler init my-worker</code></pre></div></div><p>通过Wrangler新建项目后，会自动生成wrangler.toml配置文件，里面指定了当前Worker的名称、入口文件等。</p><blockquote><p>第一次使用wrangler命令需要登录</p></blockquote><p>Cloudflare Worker支持Typescript文件，因此你可以直接编写index.ts进行开发。</p><h2 level=\"2\" id=\"使用Hono\">使用Hono</h2><p>手动写路由处理函数会比较复杂，推荐使用<a target=\"_blank\" rel=\"noreferer\" href=\"https://www.npmjs.com/package/hono\">Hono</a>进行开发，它提供了类似于Koa.js的API抽象，并且提供了多家Serverless服务提供商的支持，抹平了一些不同环境的API差异。</p><h2 level=\"2\" id=\"环境变量\">环境变量</h2><p>有时我们需要将密钥等敏感数据保存到环境变量中防止泄漏，可以使用wrangler自带的命令将变量传输到CloudFlare控制台中：</p><div class=\"llt-code readonly\"><div class=\"language\">bash</div><div class=\"wrapper\"><pre><code class=\"language-bash\">wrangler secret put CLIENT_ID\nwrangler secret put CLIENT_SECRET</code></pre></div></div><p>如果想在本地开发时使用测试用的环境变量，需要使用<code>.dev.vars</code>文件</p><div class=\"llt-code readonly\"><div class=\"language\">plaintext</div><div class=\"wrapper\"><pre><code class=\"language-plaintext\">CLIENT_ID=xxx\nCLIENT_SECRET=xxxxxxx</code></pre></div></div><p>可以在代码中这样调用环境变量：</p><div class=\"llt-code readonly\"><div class=\"language\">typescript</div><div class=\"wrapper\"><pre><code class=\"language-typescript\"><span class=\"hljs-comment\" class=\"hljs-comment\">// 直接使用</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> client_id = <span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">CLIENT_ID</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> client_secret = <span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">CLIENT_SECRET</span>;\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 使用Hono</span>\napp.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">get</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;/&apos;</span>, <span class=\"hljs-function\" class=\"hljs-function\">(<span class=\"hljs-params\" class=\"hljs-params\">ctx</span>) =&gt;</span> {\n\t<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">CLIENT_ID</span>, <span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">CLIENT_SECRET</span> } = ctx.<span class=\"hljs-property\" class=\"hljs-property\">env</span>;\n});</code></pre></div></div><h2 level=\"2\" id=\"部署\">部署</h2><p>开发完成后也可以使用wrangler一键部署</p><div class=\"llt-code readonly\"><div class=\"language\">json</div><div class=\"wrapper\"><pre><code class=\"language-json\">wrangler deploy</code></pre></div></div><h2 level=\"2\" id=\"结合Github使用\">结合Github使用</h2><p>有时会希望使用Github Actions来自动部署Workers，这当然也没问题。</p><p>要使用Github Actions部署项目，首先需要创建Actions配置文件</p><div class=\"llt-code readonly\"><div class=\"language\">yaml</div><div class=\"wrapper\"><pre><code class=\"language-yaml\"><span class=\"hljs-comment\" class=\"hljs-comment\"># .github/actions/deploy.yaml</span>\n<span class=\"hljs-attr\" class=\"hljs-attr\">name:</span> <span class=\"hljs-string\" class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\" class=\"hljs-string\">Worker</span>\n<span class=\"hljs-attr\" class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\" class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\" class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\" class=\"hljs-bullet\">-</span> <span class=\"hljs-string\" class=\"hljs-string\">main</span>\n<span class=\"hljs-attr\" class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\" class=\"hljs-attr\">deploy:</span>\n    <span class=\"hljs-attr\" class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\" class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\" class=\"hljs-attr\">timeout-minutes:</span> <span class=\"hljs-number\" class=\"hljs-number\">60</span>\n    <span class=\"hljs-attr\" class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\" class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\" class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\" class=\"hljs-string\">actions/checkout@v4</span>\n      <span class=\"hljs-bullet\" class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\" class=\"hljs-attr\">name:</span> <span class=\"hljs-string\" class=\"hljs-string\">Build</span> <span class=\"hljs-string\" class=\"hljs-string\">&amp;</span> <span class=\"hljs-string\" class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\" class=\"hljs-string\">Worker</span>\n        <span class=\"hljs-attr\" class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\" class=\"hljs-string\">cloudflare/wrangler-action@v3</span>\n        <span class=\"hljs-attr\" class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\" class=\"hljs-attr\">apiToken:</span> <span class=\"hljs-string\" class=\"hljs-string\">${{</span> <span class=\"hljs-string\" class=\"hljs-string\">secrets.CLOUDFLARE_API_TOKEN</span> <span class=\"hljs-string\" class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\" class=\"hljs-attr\">accountId:</span> <span class=\"hljs-string\" class=\"hljs-string\">${{</span> <span class=\"hljs-string\" class=\"hljs-string\">secrets.CLOUDFLARE_ACCOUNT_ID</span> <span class=\"hljs-string\" class=\"hljs-string\">}}</span></code></pre></div></div><p>然后需要在Github中配置对应的Action Secrets：<code>CLOUDFLARE_API_TOKEN</code>和<code>CLOUDFLARE_ACCOUNT_ID</code> </p><p>其中<code>CLOUDFLARE_API_TOKEN</code> 需要在Cloudflare控制台生成：<a target=\"_blank\" rel=\"noreferer\" href=\"https://dash.cloudflare.com/profile/api-tokens\">新建API tokens</a></p><p>在生成token时，选择对应的模版即可（Workers &amp; Pages)，生成的token同样只能查看一次。</p><p><code>CLOUDFLARE_ACCOUNT_ID</code> 则是你的Cloudflare账号ID，一般来说进入控制台首页后，网页链接末尾的一串数字就是账号ID，也可以在Workers &amp; Pages首页的侧边栏找到</p><h2 level=\"2\" id=\"其他\">其他</h2><p>部署完成后，通过控制台可以看到当前服务的运行情况，可以查看日志等，也可以重新调整Worker的访问链接。</p><p></p><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","id":"CloudFlare-Workers快速使用攻略","path":"/posts/CloudFlare-Workers快速使用攻略.json"}