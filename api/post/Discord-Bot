{"content":"{\"__ud_title\":\"在浏览器中运行Discord Bot\",\"__ud_tags\":[\"DiscordBot\"],\"__ud_update_time\":1731918978330,\"__ud_create_time\":1731893954441,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"在浏览器中运行Discord Bot\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"最近接触到了Discord Bot开发，也大概了解了开发一个Bot的流程，既然整个bot开发都能给予nodejs来完成，那么理论上使用stackblitz这个平台就能胜任，这样只需要一个chromium浏览器就能搞定了，岂不美哉？\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"说干就干，我立马新建了一个项目到stackblitz上，npm install一气呵成，没有什么问题。 但是一旦运行起来，就出大问题了，报错了\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"很明显，这是网络请求出了问题，虽然stackblitz模拟了一套nodejs底层，但是比较还是跑在浏览器里，不可避免地会受到跨域限制。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"解决跨域问题很简单，在mac上，通过一道命令就可以简单地接触跨域限制\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":null},\"content\":[{\"type\":\"text\",\"text\":\"open -na Google\\\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security --disable-site-isolation-trials\\n\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"不过这么做会新开一个chrome窗口，而如果我想继续用原来的chrome用户配置呢？也很简单，装一个插件就行了\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://chrome.google.com/webstore/detail/lhobafahddgcelffkeicbaginigeejlf\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer nofollow\",\"class\":null}}],\"text\":\"Allow CORS\"}]},{\"type\":\"blockquote\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"PS：stackblitz平台本身也支持绕过cors，不过是通过转发请求到代理解决的，因此需要订阅他的Team计划才可以使用\"}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"测试一下，开启cors后可以访问到其他网站了，再运行试试呢？\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"还是报错了，这下有点奇怪了，赶紧去搜一下解决方法。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在github上找到了这个讨论，原来有前人发现过这个问题\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://github.com/discord/discord-api-docs/issues/2078#issuecomment-697829305\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer nofollow\",\"class\":null}}],\"text\":\"Using DiscordBot from React app\"},{\"type\":\"text\",\"text\":\"，也有人给出了问题出现的原因：Discord官方对http请求做了限制，user-agent必须要满足要求：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://discord.com/developers/docs/reference#user-agent\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer nofollow\",\"class\":null}}],\"text\":\"https://discord.com/developers/docs/reference#user-agent\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"这也好办，chrome也有插件支持改UA：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://chromewebstore.google.com/detail/bhchdcejhohfmigjafbampogmaanbfkg\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer nofollow\",\"class\":null}}],\"text\":\"user-agent switcher\"},{\"type\":\"text\",\"text\":\"，把UA改成\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Discord Bot\"},{\"type\":\"text\",\"text\":\"应该就可以了\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"不过还有个小问题，改了UA之后stackblitz识别不出我们的浏览器了，需要先改回去，等页面加载完在改成bot UA才行，这个也无伤大雅。我找了好久也没找到能在单个tab内分别针对不同域名配置不同UA的插件，暂且先手动修改吧。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"一番配置后再次运行，这下总算成功了，Discord Bot顺利在浏览器内运行起来了，并且能够正常回复我们在Discord APP里发送的指令，大功告成。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"虽然说这个方法是用来解决特定场景的开发需求，但是鉴于stackblitz本身作为web开发的最佳工具的地位，移除CORS和UA代理应该可以作为Nodejs的通用解决方案，要是能整合一下做成一个插件，一键启动就好了。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"新增一站式解决\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"新增解决方案，如果是使用whistle + switchyomega插件进行开发的话，直接使用如下的whistle配置文件，即可一键开启跳过跨域+Discord UA修改：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":null},\"content\":[{\"type\":\"text\",\"text\":\"* resCors://*\\ndiscord.com ua://DiscordBot\"}]}]}","title":"在浏览器中运行Discord Bot","tags":["DiscordBot"],"updateTime":1731918978330,"createTime":1731893954441,"draft":false,"intro":"最近接触到了Discord Bot开发，也大概了解了开发一个Bot的流程，既然整个bot开发都能给予nodejs来完成，那么理论上使用stackblitz这个平台就能胜任，这样只需要一个chromium浏览器就能搞定了，岂不美哉？","html":"<h2><strong>在浏览器中运行Discord Bot</strong></h2><p>最近接触到了Discord Bot开发，也大概了解了开发一个Bot的流程，既然整个bot开发都能给予nodejs来完成，那么理论上使用stackblitz这个平台就能胜任，这样只需要一个chromium浏览器就能搞定了，岂不美哉？</p><p>说干就干，我立马新建了一个项目到stackblitz上，npm install一气呵成，没有什么问题。 但是一旦运行起来，就出大问题了，报错了</p><p>很明显，这是网络请求出了问题，虽然stackblitz模拟了一套nodejs底层，但是比较还是跑在浏览器里，不可避免地会受到跨域限制。</p><p>解决跨域问题很简单，在mac上，通过一道命令就可以简单地接触跨域限制</p><div class=\"llt-code readonly\"><div class=\"language\">css</div><div class=\"wrapper\"><pre><code>open -na Google\\ Chrome <span class=\"hljs-attr\" class=\"hljs-attr\">--args</span> <span class=\"hljs-attr\" class=\"hljs-attr\">--user-data-dir</span>=/tmp/temporary-chrome-profile-dir <span class=\"hljs-attr\" class=\"hljs-attr\">--disable-web-security</span> <span class=\"hljs-attr\" class=\"hljs-attr\">--disable-site-isolation-trials</span>\n</code></pre></div></div><p>不过这么做会新开一个chrome窗口，而如果我想继续用原来的chrome用户配置呢？也很简单，装一个插件就行了<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://chrome.google.com/webstore/detail/lhobafahddgcelffkeicbaginigeejlf\">Allow CORS</a></p><blockquote><p>PS：stackblitz平台本身也支持绕过cors，不过是通过转发请求到代理解决的，因此需要订阅他的Team计划才可以使用</p></blockquote><p>测试一下，开启cors后可以访问到其他网站了，再运行试试呢？</p><p>还是报错了，这下有点奇怪了，赶紧去搜一下解决方法。</p><p>在github上找到了这个讨论，原来有前人发现过这个问题<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/discord/discord-api-docs/issues/2078#issuecomment-697829305\">Using DiscordBot from React app</a>，也有人给出了问题出现的原因：Discord官方对http请求做了限制，user-agent必须要满足要求：<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://discord.com/developers/docs/reference#user-agent\">https://discord.com/developers/docs/reference#user-agent</a></p><p>这也好办，chrome也有插件支持改UA：<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://chromewebstore.google.com/detail/bhchdcejhohfmigjafbampogmaanbfkg\">user-agent switcher</a>，把UA改成<code>Discord Bot</code>应该就可以了</p><p>不过还有个小问题，改了UA之后stackblitz识别不出我们的浏览器了，需要先改回去，等页面加载完在改成bot UA才行，这个也无伤大雅。我找了好久也没找到能在单个tab内分别针对不同域名配置不同UA的插件，暂且先手动修改吧。</p><p>一番配置后再次运行，这下总算成功了，Discord Bot顺利在浏览器内运行起来了，并且能够正常回复我们在Discord APP里发送的指令，大功告成。</p><p>虽然说这个方法是用来解决特定场景的开发需求，但是鉴于stackblitz本身作为web开发的最佳工具的地位，移除CORS和UA代理应该可以作为Nodejs的通用解决方案，要是能整合一下做成一个插件，一键启动就好了。</p><h3><strong>新增一站式解决</strong></h3><p>新增解决方案，如果是使用whistle + switchyomega插件进行开发的话，直接使用如下的whistle配置文件，即可一键开启跳过跨域+Discord UA修改：</p><div class=\"llt-code readonly\"><div class=\"language\">arduino</div><div class=\"wrapper\"><pre><code>* resCors:<span class=\"hljs-comment\" class=\"hljs-comment\">//*</span>\ndiscord.com ua:<span class=\"hljs-comment\" class=\"hljs-comment\">//DiscordBot</span></code></pre></div></div><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","id":"Discord-Bot","path":"/posts/Discord-Bot.json"}